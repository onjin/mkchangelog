[project]
name = "mkchangelog"
description = "Generate changelog from git log with convencional commits."
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Marek WywiaÅ‚", email = "onjinx@gmail.com" },
]
classifiers = [
  "Intended Audience :: Developers",
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["gitpython","semver", "jinja2", "rich", "pluggy"]

[project.urls]
Documentation = "https://github.com/onjin/mkchangelog#readme"
Issues = "https://github.com/onjin/mkchangelog/issues"
Source = "https://github.com/onjin/mkchangelog"

[project.scripts]
mkchangelog = "mkchangelog:main"
git-mkc = "mkchangelog:main"



[project.optional-dependencies]
# Linting and formatting tools use a more narrow specification to ensure
# developer consistency. All other dependencies are as above.
devel-types = [
  "mypy           ==1.13.0",
]
devel-test = [
  "coverage[toml]    ~=7.0",
  "pytest            ~=8.0",
  "pytest-cov        ~=5.0",
]
devel-docs = ["mkdocs", "mkdocs-material"]
devel = ["mkchangelog[devel-docs,devel-types,devel-test]", "ruff==0.7.1"]

################################################################################
## Hatch Build Configuration
################################################################################
[build-system]
requires = [
  "hatchling",
  "hatch-vcs",
]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/mkchangelog/__version__.py"

[tool.hatch.build.targets.sdist]
include = [
  # Source
  "/src/mkchangelog/**/*.py",
  "/src/mkchangelog/**/*.pyi",
  "/src/mkchangelog/**/py.typed",

  # Metadata
  "*.md",
  "LICENSE.txt",
]

[tool.hatch.build.targets.wheel]
packages = ["/src/mkchangelog"]
include = [
  # Source
  "/src/mkchangelog/**/*.py",
  "/src/mkchangelog/**/*.pyi",
  "/src/mkchangelog/**/py.typed",
]
artifacts = [
]

################################################################################
## Hatch Environment Configuration
################################################################################

[tool.hatch.envs.default]
installer = "uv"
features = ["devel"]
extra-dependencies = [
  "hatchling",
  "packaging",
  "setuptools ; python_version >= '3.12'",
]

[tool.hatch.envs.default.scripts]
lint       = "ruff check --output-format=full --show-fixes {args:./src}"
format     = "black {args:./src}"
typecheck  = "mypy {args:.}"
test       = "pytest tests/ {args}"
all        = ["format", "lint", "typecheck", "test"]

[tool.hatch.envs.test]
installer = "uv"
features = ["devel-test"]

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

################################################################################
## PyTest Configuration
################################################################################

[tool.pytest.ini_options]
pythonpath = "."
addopts = [
  "--import-mode=importlib",
  "--cov-config=pyproject.toml",
  "--cov=mkchangelog",
  "--cov-report=xml",
]
filterwarnings = [
  "ignore::DeprecationWarning:mkchangelog",
  "ignore::DeprecationWarning:tests",
  "ignore::PendingDeprecationWarning:mkchangelog",
  "ignore::PendingDeprecationWarning:tests",
]

log_level       = "NOTSET"
log_format      = "%(asctime)s.%(msecs)03d [%(levelname)-8s] %(name)s: %(message)s"
log_date_format = "%H:%M:%S"

markers = [
]


################################################################################
## Coverage
################################################################################

[tool.coverage.paths]
mkchangelog  = ["/src/mkchangelog"]
tests = ["/tests"]

[tool.coverage.report]
exclude_lines = [
  "if __name__ == .__main__.:", # Ignore non-runnable code
  "if TYPE_CHECKING:",          # Ignore typing
  "raise NotImplementedError",  # Ignore defensive assertions
  "@(abc\\.)?abstractmethod",   # Ignore abstract methods
]

################################################################################
## Black
################################################################################

[tool.black]
target-version = ["py38"]
line-length = 120
skip-string-normalization = true

################################################################################
## Ruff Configuration
################################################################################

[tool.ruff]
target-version = "py38"
line-length = 120

extend-exclude = [
  "src/mkchangelog/__init__.py",
  "src/mkchangelog/__version__.py",
]

[tool.ruff.lint]
select = ["ALL"]

ignore = [
  "D200",   # Require single line docstrings to be on one line.
  "D203",   # Require blank line before class docstring
  "D212",   # Multi-line docstring summary must start at the first line
  "ANN101", # `self` must be typed
  "ANN102", # `cls` must be typed
  "FIX002", # Forbid TODO in comments
  "TD002",  # Assign someone to 'TODO' comments

  # The following are disabled for compatibility with the formatter
  "COM812", # Enforce trailing commas
  "ISC001", # Require imports to be sorted

  "ANN401", # Sometimes we return Any for now
  "PLR0913",# Allow too many parameters
  "D107",   # Do not force docstrings on __init__
  "D100",   # Missing docstrings
  "D101",   # Missing docstrings
  "D102",   # Missing docstrings
  "D103",   # Missing docstrings
  "D104",   # Missing docstrings
  "C901",   # We have complex functions
  "PLR0912",# With many branches
  "PTH123", # We stick with open()
  "PTH207", # We stick with glob()
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["mkchangelog"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.format]
preview               = true
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pyright]
include = ["mkchangelog"]
exclude = [
    "**/__pycache__"
]

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.11"
pythonPlatform = "Linux"

executionEnvironments = [
  { root = "mkchangelog" }
]
